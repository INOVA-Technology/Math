#!/usr/bin/env ruby

require "readline"

# PREFIXES = { -15 => "f", -12 => "p", -9 => "n",
# 			 -6 => "Âµ", -3 => "m", 0 => "",
# 			  3 => "k", 6 => "M", 9 => "G",
# 			  12 => "T", 15 => "P", 18 => "E" }

class Equations

	C = 3e8

	def hz_to_m(frequency)
		(C / frequency)
	end

	alias_method :m_to_hz, :hz_to_m

	def method_missing(m, *args, &block)
		"That equation doesn't exsist here yet."
	end
end

class Cli

	def initialize
		@equations = Equations.new
	end

	def help
		["To use an equation, just type something like this: m-to-hz 100",
		"Thats 100 meters, converted to hertz",
		"You can use e for scientific notation. Eg. 3e5 = 300000",
		"Available Equations:",
		(@equations.public_methods(false) - [:method_missing]).map { |eq| eq.to_s.gsub(/_/, "-") }]
		
	end

	def method_missing(m, *args, &block)
		# checks if it only contains numbers, math symbols, and e
		if args.all? { |arg| arg.match(/\A[\d+\-*\/.e ]+\z/) }
			args.map! { |arg| eval(arg) }
			[@equations.send(m, *args)]
		else
			["Invalid Number"]
		end
	end

	def quit
		exit
	end

end

# def load_functions file
# 	define_method
# end

cli = Cli.new

if __FILE__ == $0
	loop do
		command, variable = Readline::readline("> ", true).downcase.strip.squeeze(" ").split(" ")
		unless command.nil?
			command.gsub!(/-/, "_")
			puts cli.send(command, *variable)
		end
	end
end