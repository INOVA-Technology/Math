#!/usr/bin/env ruby

require "readline"

# PREFIXES = { -15 => "f", -12 => "p", -9 => "n",
# 			 -6 => "Âµ", -3 => "m", 0 => "",
# 			  3 => "k", 6 => "M", 9 => "G",
# 			  12 => "T", 15 => "P", 18 => "E" }

def define_equation file
	File.foreach(file) { |line|
		name, var, equation = line.split(":")
		Equations.class_eval %[
			def #{name}(#{var})
				#{equation}
			end
		]
	}
end

def all_formulas
	(Equations.instance_methods(false) - [:method_missing])
	.map { |i| i.to_s.gsub(/_/, "-") }
end

class Equations

	C = 3e8

	def m_with_hz(frequency)
		C / frequency
	end

	alias_method :hz_with_m, :m_with_hz

	def qudrtc_frml_with_a_b_c(a, b, c)
		positive = (-b + Math.sqrt(b ** 2 - 4 * a * c)) / 2 * a
		negative = (-b - Math.sqrt(b ** 2 - 4 * a * c)) / 2 * a
		[positive, negative]
	end

	def pythgrn_thrm_with_a_b(a, b)
		a = Math.sqrt(a ** 2 + b ** 2)
		a = "sqrt(#{(a ** 2).round})" unless a.to_i == a
		a
	end

	def pythgrn_thrm_with_b_c(b, c)
		a = Math.sqrt(c ** 2 - b ** 2)
		a = "sqrt(#{(a ** 2).round})" unless a.to_i == a
		a
	end

	def method_missing(m, *args, &block)
		"That equation doesn't exist here. (yet)"
	end
end

class Cli

	attr_reader :equations

	def initialize
		@equations = Equations.new
	end

	def help
		["To use an equation, just type something like this: hz-with-m 100",
		"Thats 100 meters, converted to hertz",
		"Or something like this: pythgrn-thrm-with-b-c 4 5",
		"That's a^2 = 5^2 - 4^2, or more familiarly, a^2 + 4^2 = 5^2",
		"You also can use e for scientific notation. Eg. 3e5 = 300000",
		"Type quit to quit",
		"",
		"Available Equations:",
		all_formulas]
	end

	def method_missing(m, *args, &block)
		# checks if it only contains numbers, math symbols, and e
		if args.all? { |arg| arg.match(/\A[\d+\-*\/.e ]+\z/) }
			args.map! { |arg| eval(arg) }
			@equations.send(m, *args)
		else
			"Invalid number"
		end
	end

	def quit
		exit
	end

end

cli = Cli.new

case ARGV[0]
when "-l", "--load"
	ARGV.shift
	define_equation(ARGV.shift)
	# I will add more stuff here
end

if __FILE__ == $0
	puts "Type help for help."
	list = all_formulas
	comp = proc { |s| list.grep(/^#{Regexp.escape(s)}/) }
	Readline.completion_append_character = " "
	Readline.completion_proc = comp

	loop do
		command, *variables = Readline::readline("> ", true)
		.downcase.strip.squeeze(" ").split(" ")
		unless command.nil?
			command.gsub!(/-/, "_")
			puts begin
				cli.send(command, *variables)
			rescue ArgumentError
				cli.equations.method(command).arity
				arg_list = (1..argc).map { |i| "<number_#{i}>" }.join(" ")
				"Usage: #{command} #{arg_list}"
			end
		end
	end
end