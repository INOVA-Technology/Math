#!/usr/bin/env ruby

require "rubygems"
gem "minitest"
require "minitest/autorun"
require "minitest/pride"
load "solve"

describe Equations do

	before do
		@equations = Equations.new
	end

	describe "m_with_hz" do
		it "must return correct value" do
			@equations.m_with_hz(300e12).must_equal 1.0e-06
			@equations.m_with_hz(3e6).must_equal 100
		end
	end

	describe "hz_with_m" do
		it "must return correct value" do
			@equations.hz_with_m(100e3).must_equal 3e3
			@equations.hz_with_m(100.0e-12).must_equal 3e18
		end
	end

	describe "qudrtc_frml_with_a_b_c" do
		it "must return correct value" do
			@equations.qudrtc_frml_with_a_b_c(1, 2, -3).must_equal [1.0, -3.0]
		end
	end

	describe "pythg_thrm_with_a_b" do
		it "must return correct value" do
			@equations.pythg_thrm_with_a_b(3, 4).must_equal 5
		end
	end

	describe "pythg_thrm_with_b_c" do
		it "must return correct value" do
			@equations.pythg_thrm_with_b_c(4, 5).must_equal 3
		end
	end

	describe "equation does not exist" do
		it "must warn user" do
			@equations.doesnt_exist(500).must_equal "That equation doesn't exist here yet."
		end
	end

end

describe "Cli" do

	before do
		@cli = Cli.new
		@error_msg = "Invalid number"
	end

	describe "an equation is ran" do
		it "must warn user if an invalid number is used" do
			@cli.doesnt_matter("hello").must_equal @error_msg
			@cli.doesnt_matter("34five").must_equal @error_msg
			@cli.doesnt_matter("q12").must_equal @error_msg
		end

		it "must work if a valid equation is ran" do
			@cli.doesnt_matter("123.3").wont_equal @error_msg
			@cli.doesnt_matter("12e3").wont_equal @error_msg
			@cli.doesnt_matter("1e-4").wont_equal @error_msg
		end
	end

end